<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>编译器宏的理解</title>
      <link href="/2023/09/04/%E7%BC%96%E8%AF%91%E5%99%A8%E5%AE%8F%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>/2023/09/04/%E7%BC%96%E8%AF%91%E5%99%A8%E5%AE%8F%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="官网说明"><a href="#官网说明" class="headerlink" title="官网说明"></a>官网说明</h2><blockquote><p>编译器宏是一种特殊的代码，由编译器处理并转换为其他东西。它们实际上是一种更巧妙的<strong>字符串替换形式</strong>。<br>Vue 的单文件组件编译器支持各种宏，例如 defineProps()、defineEmits() 和 defineExpose()。这些宏有意设计得<strong>像是</strong>普通的 JavaScript 函数，以便它们可以利用 JavaScript &#x2F; TypeScript 中的相同解析器和类型推断工具。然而，它们不是在浏览器中运行的实际函数。这些特殊字符串会被编译器检测到并替换为实际真正运行的 JavaScript 代码。<br>宏在使用上有一些不适用于普通 JavaScript 代码的限制。例如，你可能认为 const dp &#x3D; defineProps 会为 defineProps 创建一个别名，但实际上它会导致错误。相同的限制也存在于传入 defineProps() 的值，因为“参数”必须由编译器处理，而不是在运行时。<br>官方说明<a href="https://cn.vuejs.org/glossary/#compiler-macro">https://cn.vuejs.org/glossary/#compiler-macro</a></p></blockquote><h2 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h2><ol><li>编辑器宏不是JavaScript函数，只是形似；</li><li>编辑器宏实际是字符串替换；</li><li>编辑器宏正因为是字符串替换，所以是在编译时执行；因为不是JS函数，所以不在运行时执行；</li><li>宏（英语：Macro），是一种批量处理的称谓。计算机科学里的宏是一种抽象（Abstraction），它根据一系列预定义的规则替换一定的文本模式。解释器或编译器在遇到宏时会自动进行这一模式替换。– 百科</li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 术语 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Postman测试功能编写及使用</title>
      <link href="/2023/01/12/Postman%E6%B5%8B%E8%AF%95%E5%8A%9F%E8%83%BD%E7%BC%96%E5%86%99%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/01/12/Postman%E6%B5%8B%E8%AF%95%E5%8A%9F%E8%83%BD%E7%BC%96%E5%86%99%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>该文档是参考官网教程，并基于自己的理解和使用进行了个别修改，需要更详细的内容请转官网；<a href="https://learning.postman.com/docs/writing-scripts/test-scripts/">https://learning.postman.com/docs/writing-scripts/test-scripts/</a></p></blockquote><p>测试脚本能够帮助你确认API是否按预期工作，服务之间的集成是否可靠，以及确认任何更改都没有破坏现有功能。</p><p>也可以使用测试代码调试api中错误处理逻辑。例如，发送请求时包含不完整数据或错误参数来验证 API的错误处理逻辑是否正常。</p><p>测试脚本可以使用 JavaScript语言编写。</p><h2 id="1、添加测试脚本"><a href="#1、添加测试脚本" class="headerlink" title="1、添加测试脚本"></a>1、添加测试脚本</h2><p>测试脚本可以添加到请求、集合或文件夹中；Postman提供一些常用的测试脚本代码片段模板，可以参考模板更改为适合自己的测试逻辑。</p><p>以单个请求添加测试脚本为例，打开请求在【Tests】选项卡中输入测试脚本。测试脚本将在请求运行后执行。输出位于响应的【Test Results】选项卡中。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/97520766ed1e4ee6b253ee6fce88ef8e~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="2、编写测试脚本"><a href="#2、编写测试脚本" class="headerlink" title="2、编写测试脚本"></a>2、编写测试脚本</h2><p>测试脚本可以使用动态变量，对响应数据执行测试断言，并在请求之间传递数据。</p><p>在请求的【Tests】选项卡中，手动输入JavaScript测试代码或者选择代码编辑器旁边的测试代码模板。</p><p>点击按钮【Send】时，Postman 会在响应数据返回后运行测试脚本。</p><h3 id="2-1、验证响应数据"><a href="#2-1、验证响应数据" class="headerlink" title="2.1、验证响应数据"></a>2.1、验证响应数据</h3><p>若要验证请求返回的数据，可以在测试中使用 pm.response 对象。</p><p>使用 pm.test 函数定义测试，提供一个名称和函数，该函数返回一个布尔值（真或假），指示测试是通过还是失败。在断言中使用 ChaiJS BDD 语法和 pm.expect 来测试响应详细信息。</p><p>pm.test 函数的第一个参数是将在【Test Results】输出，使用它来识别您的测试预期，并将测试的目的传达给查看结果的任何人。</p><p>例如，测试响应状态代码是否为 200：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pm.<span class="title function_">test</span>(<span class="string">&quot;Status code is 200&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    pm.<span class="property">response</span>.<span class="property">to</span>.<span class="property">have</span>.<span class="title function_">status</span>(<span class="number">200</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>【Test Results】选项卡标题显示通过的测试数和总共运行的测试数。还可以点击Passed、Skipped、Failed查看各自的测试结果。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3005d2a83c48469e82ac7f9d4d70bd5a~tplv-k3u1fbpfcp-zoom-1.image"></p><h3 id="2-2、使用-pm-expect-格式化测试结果"><a href="#2-2、使用-pm-expect-格式化测试结果" class="headerlink" title="2.2、使用 pm.expect 格式化测试结果"></a>2.2、使用 pm.expect 格式化测试结果</h3><p>使用 pm.expect 语法可为测试结果提供不同的格式。</p><p>测试请求环境示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pm.<span class="title function_">test</span>(<span class="string">&quot;environment to be production&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    pm.<span class="title function_">expect</span>(pm.<span class="property">environment</span>.<span class="title function_">get</span>(<span class="string">&quot;env&quot;</span>)).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="string">&quot;production&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>你可以根据自己的程序使用不同的语法编写测试逻辑脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pm.test(&quot;response should be okay to process&quot;, function () &#123;</span><br><span class="line">    pm.response.to.not.be.error;</span><br><span class="line">    pm.response.to.have.jsonBody(&quot;&quot;);</span><br><span class="line">    pm.response.to.not.have.jsonBody(&quot;error&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>也可以针对响应数据格式使用定制的语法来确定请求响应的有效性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pm.test(&quot;response must be valid and have a body&quot;, function () &#123;</span><br><span class="line">    pm.response.to.be.ok;</span><br><span class="line">    pm.response.to.be.withBody;</span><br><span class="line">    pm.response.to.be.json;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>脚本可以包含所需的任意数量的测试，并在选择【Save】时与请求详细信息的其余部分一起保存。如果您共享集合、发布文档或使用【Run in Postman】功能，您的测试代码可以被任何人查看或者导入。</p><h3 id="2-3、测试脚本模板"><a href="#2-3、测试脚本模板" class="headerlink" title="2.3、测试脚本模板"></a>2.3、测试脚本模板</h3><p>不熟悉测试语法的同学可以使用提供的测试脚本模板来编写测试。模板位于脚本编辑器的右侧。选择模板会自动将所需的代码添加到脚本中，从而帮助您快速开始测试。添加到脚本后，您可以编辑代码段以满足特定的测试要求。</p><h2 id="3、调试测试脚本"><a href="#3、调试测试脚本" class="headerlink" title="3、调试测试脚本"></a>3、调试测试脚本</h2><p>如果您在测试中遇到问题：</p><ul><li>检查脚本中是否有任何错误。红色标记将突出显示有错误的脚本。您还可以检查响应部分以确定错误。</li></ul><!----><ul><li>使用 log 语句调试测试，以确保断言正确的数据。</li></ul><p>在控制台打印日志代码：console.log()、console.info()等，具体查看：<a href="https://learning.postman.com/docs/sending-requests/troubleshooting-api-requests/#using-log-statements">https://learning.postman.com/docs/sending-requests/troubleshooting-api-requests/#using-log-statements</a></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ec4f84c609ea4129a9f1574fcb0d37dc~tplv-k3u1fbpfcp-zoom-1.image"></p>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Postman </tag>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo设置标签及分类</title>
      <link href="/2022/12/19/hexo%E6%A0%87%E7%AD%BE%E5%8F%8A%E5%88%86%E7%B1%BB/"/>
      <url>/2022/12/19/hexo%E6%A0%87%E7%AD%BE%E5%8F%8A%E5%88%86%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>以下方式仅限于vexo主题下使用；</p><h1 id="设置标签"><a href="#设置标签" class="headerlink" title="设置标签"></a>设置标签</h1><p>标签设置有两种方式；</p><p>1、数组方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tags: [标签1, 标签2]</span><br></pre></td></tr></table></figure><p>相对方法2，这种方式写起来比较简单、直观；</p><p>2、短横线方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tags: </span><br><span class="line">- 标签1 </span><br><span class="line">- 标签2</span><br></pre></td></tr></table></figure><blockquote><p>注意：该方式-后要有空格；</p></blockquote><h1 id="设置分类"><a href="#设置分类" class="headerlink" title="设置分类"></a>设置分类</h1><p>分类设置方式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">categories: 分类名</span><br></pre></td></tr></table></figure><blockquote><p>注意：每篇文章必须包括categories，且分类名必须不为空；也就是说每篇文章必须分类，否则点击Series会报错。当然，这个仅实验于vexo主题。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo自动部署</title>
      <link href="/2022/12/12/hexo%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/"/>
      <url>/2022/12/12/hexo%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="生成及部署"><a href="#生成及部署" class="headerlink" title="生成及部署"></a>生成及部署</h2><p>根据官网说明，执行下列的其中一个命令，让 Hexo 在生成完毕后自动部署网站，两个命令的作用是相同的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate --deploy</span><br><span class="line">hexo deploy --generate</span><br></pre></td></tr></table></figure><p>简写格式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo设置主题</title>
      <link href="/2022/12/10/hexo%E8%AE%BE%E7%BD%AE%E4%B8%BB%E9%A2%98/"/>
      <url>/2022/12/10/hexo%E8%AE%BE%E7%BD%AE%E4%B8%BB%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h1><h2 id="1-选择主题"><a href="#1-选择主题" class="headerlink" title="1. 选择主题"></a>1. 选择主题</h2><p>截止本文编写时，hexo官网提供了372个主题，用户可以根据自己喜好选择主题；<br>个人当前选择主题是yanm1ng&#x2F;hexo-theme-vexo；</p><h2 id="2-下载主题"><a href="#2-下载主题" class="headerlink" title="2. 下载主题"></a>2. 下载主题</h2><p>通过命令下载主题，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:dreamice13/hexo-theme-vexo.git themes/vexo</span><br></pre></td></tr></table></figure><h2 id="3-设置主题"><a href="#3-设置主题" class="headerlink" title="3. 设置主题"></a>3. 设置主题</h2><p>在_config.yml文件中，找到theme选项，将选项设置为：<code>theme: vexo</code><br>设置之后，即可使用该主题的样式；</p><h1 id="进阶使用"><a href="#进阶使用" class="headerlink" title="进阶使用"></a>进阶使用</h1><p>vexo主题中有一些作者信息、图片，为了改成自己的信息并同步github，需要fork对应的主题。</p><h2 id="1、fork主题"><a href="#1、fork主题" class="headerlink" title="1、fork主题"></a>1、fork主题</h2><p>fork主题</p><h2 id="2、下载主题"><a href="#2、下载主题" class="headerlink" title="2、下载主题"></a>2、下载主题</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:dreamice13/hexo-theme-vexo.git themes/vexo</span><br></pre></td></tr></table></figure><h2 id="3、修改提交"><a href="#3、修改提交" class="headerlink" title="3、修改提交"></a>3、修改提交</h2><p>在themes&#x2F;vexo文件夹下进行git提交、上传</p><h1 id="样式问题"><a href="#样式问题" class="headerlink" title="样式问题"></a>样式问题</h1><h2 id="1、部署样式错乱"><a href="#1、部署样式错乱" class="headerlink" title="1、部署样式错乱"></a>1、部署样式错乱</h2><p>删除public文件夹，使用命令<code>hexo g</code>重新生成。</p><blockquote><p>使用<code>hexo clean</code>命令清除缓存文件 (db.json) 和已生成的静态文件 (public)。<code>hexo c</code>不是其简写形式，不能使用。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
